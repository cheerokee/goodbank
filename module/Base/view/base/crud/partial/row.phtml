<?php
use Zend\Stdlib\Hydrator\NamingStrategy\UnderscoreNamingStrategy;
use Zend\Filter\Word\UnderscoreToCamelCase;
use Doctrine\Common\Collections\Collection;
use Doctrine\Common\Collections\ArrayCollection;

// Obtém uma variavel da view pai
if(! $this->_primaryKey) {
    $this->_primaryKey = $this->ViewModel()->getCurrent()->getVariable('_primaryKey');
}

if(!$this->_listView) {
    $this->_listView = $this->ViewModel()->getCurrent()->getVariable('_listView');
}

$em = $this->em;
$namingStrategy = new UnderscoreNamingStrategy();
$filter = new UnderscoreToCamelCase();
$entity = $this->entity;
$form = $this   ->ViewModel()
    ->getCurrent()
    ->getVariable('form');

$order = $this->order;
?>
<tr id="row_<?=$this->_listView['controller']?>_<?=$entity->getId()?>" class="base_row" style="<?=($order)?'cursor: ns-resize':'';?>">

<?php


$identifyMethod = 'getId';

ob_start();
if(!empty($this->_listView['fields'])) {
    foreach ($this->_listView['fields'] as $k => $field) {
        if ($field['list'] == true) {
            $value = '';
            $naming = $namingStrategy->hydrate($k);
            $camelCase = $filter->filter($k);
            $fieldForm = lcfirst($camelCase);
            $method = "get$camelCase";
            $methodBool = "is$camelCase";
            if(method_exists($entity, $methodBool)){
                $method = $methodBool;
            }

            if (method_exists($entity, $method)) {
                /**
                 * Se o primaryKey setado no controller for igual a coluna atual
                 * captura o método identificador
                 */
                if ($this->_primaryKey == $k)
                    $identifyMethod = $method;

                if (isset($field['label_generator']) && null !== ($labelGenerator = $field['label_generator'])) {
                    $value = call_user_func($labelGenerator, $entity);
                } else {

                    if ($field['join']) {

                        $jFields = explode(".", $field['join']);
                        $jConcat = array();
                        foreach ($jFields as $jField) {
                            $jMethod = "get" . $filter->filter($jField);
                            if ($entity->$method()) {
                                $jConcat[] = $entity->$method()->$jMethod();
                            }
                        }
                        $value = implode(' - ', $jConcat);
                    } else {

                        if ($field['view_helper']) {
                            $value = $entity->$method();

                            foreach ($field['view_helper'] as $k => $vh) {
                                $nameViewHelper = $vh['name'];
                                $paramsViewHelper = $vh['params'];
                                array_unshift($paramsViewHelper, $value);
                                $value = $this->__call($nameViewHelper, $paramsViewHelper);
                            }
                        } else {
                            if ($entity->$method() instanceof \DateTime) {
                                // Uso direto
                                $object = $entity->$method();

                                if ($object->getTimeStamp()) {
                                    // $value = ($entity->$method())?$entity->$method()->format('Y-m-d H:i:s'):"";
                                    // Usando viewhelper
                                    $value = $this->dateFormat($entity->$method(), IntlDateFormatter::MEDIUM, 2, "pt_BR");
                                    // Usando as configs do bootstrap
                                    $value = $this->dateFormat($entity->$method(), \IntlDateFormatter::SHORT, 2);
                                }
                            } else {
                                if ($entity->$method() instanceof Collection) {
                                    $value = $this->templatedCollection($entity->$method(), 'partial/collection', array(
                                        'method' => $field['method'],
                                        'label_collection' => $field['label_collection']
                                    ));

                                } else {

                                    if (is_array($entity->$method())) {

                                        $collection = new ArrayCollection($entity->$method());

                                        $value = $this->templatedCollection($collection, 'partial/collection', array(
                                            'method' => $field['method']
                                        ));


                                    } else {

                                        if ($form->has($fieldForm)) {
                                            $element = $form->get($fieldForm);

                                            if ($element instanceof DoctrineModule\Form\Element\ObjectSelect) {
                                                $proxy = $element->getProxy();
                                                $property = $proxy->getProperty();
                                                $getter = 'get' . ucfirst($property);
                                                if ($entity->$method())
                                                    $value = $entity->$method()->{$getter}();
                                                else
                                                    $value = '';
                                            } else
                                                if ($element instanceof Zend\Form\Element\Radio) {
                                                    $options = $element->getValueOptions();
                                                    if ($options[$entity->$method()] !== null)
                                                        $value = $this->translate($options[$entity->$method()]);
                                                } else {
                                                    if ($element instanceof Zend\Form\Element\Select) {
                                                        $options = $element->getValueOptions();
                                                        if ($options[$entity->$method()] !== null)
                                                            $value = $this->translate($options[$entity->$method()]);
                                                        else
                                                            $value = '';
                                                    } else {
                                                        $value = $entity->$method();
                                                    }
                                                }

                                        } else {
                                            $value = $entity->$method();
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }

            ?>
            <td <?= ($field['list_class']) ? "class='{$field['list_class']}'" : "" ?>>
                <?= $value ?>
            </td>
            <?php
        }
    }
}

$cform = ob_get_contents();
ob_end_clean();

$pkRow = $entity->$identifyMethod();

if($this->_listView['selectLine']['enable'] == true){
    ?>
    <td align="center" style="width: 10px !important;">
        <input type="checkbox" name="ides[]" value="<?=$pkRow;?>">
    </td>
    <?php
}

echo $cform;

if($this->_listView['actions']['enable'] == true){
    ?>
    <td class="text-center">
        <div class="g-pos-rel g-top-3 d-inline-block">
            <a id="dropDown<?=$pkRow?>Invoker"
               class="u-link-v5 g-line-height-0 g-font-size-24 g-color-gray-light-v6 g-color-secondary--hover"
               href="#"
               aria-controls="dropDown<?=$pkRow?>"
               aria-haspopup="true"
               aria-expanded="false"
               data-dropdown-event="click"
               data-dropdown-target="#dropDown<?=$pkRow?>">
                <i class="hs-admin-more-alt"></i>
            </a>

            <div id="dropDown<?=$pkRow?>"
                 class="u-shadow-v31 g-pos-abs g-right-0 g-z-index-2 g-bg-white u-dropdown--css-animation u-dropdown--hidden u-dropdown--reverse-y u-dropdown--simple"
                 aria-labelledby="dropDown<?=$pkRow?>Invoker">
                <ul class="list-unstyled g-nowrap mb-0">
                    <?php
                    /**
                     * Listando os botões Crud defaults
                     */

                    // ACTION:DEFAULTS --- START
                    if(!empty($this->_listView['actions']['defaults'])) {
                        foreach ($this->_listView['actions']['defaults'] as $k => $action) {

                            if($action['title'] == 'Novo')
                                continue;

                            if (!$action['enable']){
                                continue;
                            }

                            if($this->fk != null && $this->fk_id != null)
                            {
                                $link = $this->url($this->controller.'-join-'.$k,array('fk' => $this->fk,'fk_id' => $this->fk_id,'id' => $entity->$identifyMethod()));
                            }else{
                                $link = $this->url($this->_listView['route'], array(
                                    'controller' => $this->_listView['controller'],
                                    'action' => $k,
                                    'id' => $entity->$identifyMethod()
                                ));
                            }

                            if (($action['authorize'] === false && $this->authorized($this->_listView['title'],$action['title'])) || $action['authorize'] === true) {

                                ?>
                                <li>
                                    <a class=" <?= ($k == 'delete') ? 'decision' : ''; ?> d-flex align-items-center u-link-v5 g-bg-gray-light-v8--hover g-font-size-12 g-font-size-default--md g-color-gray-dark-v6 g-px-25 g-py-14"
                                       href="<?= $link ?><?= ($param) ? '?' . $param.'&page=' . $this->page : '?page=' . $this->page; ?>">
                                        <i class="<?= $action['icon'] ?> g-font-size-18 g-color-gray-light-v6 g-mr-10 g-mr-15--md"></i>
                                        <?= $action['title'] ?>
                                    </a>
                                </li>
                                <?php
                            }
                        }
                    }
                    // ACTION:DEFAULTS --- END

                    // ACTION:CUSTOM --- START
                    if(!empty($this->_listView['actions']['customs'])){

                        // Botões soltos
                        foreach ($this->_listView['actions']['customs'] as $k => $action) {
                            if ($action['group'] == false) {
                                if (null !== ($labelGenerator = $action['label_generator'])) {
                                    $value = call_user_func($labelGenerator, $entity);
                                    $action['label'] = $action['label'] . " (" . $value . ")";
                                }

                                echo $this->partial('partial/button', array(
                                    'key' => $k,
                                    'action' => $action,
                                    'entity' => $entity,
                                    'identifyMethod' => $identifyMethod,
                                    'em' => $em,
                                    'listView' => $this->_listView
                                ));
                            }
                        }

                    }
                    // ACTION:CUSTOM --- END
                    ?>
                </ul>
            </div>
        </div>
    </td>
    <?php
}

?>
</tr>
